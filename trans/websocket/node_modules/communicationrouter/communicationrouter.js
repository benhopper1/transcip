var path = require('path');
var basePath = path.dirname(require.main.filename);
var HashArrayObject = require(basePath + '/libs/hashofarrayobject.js');
var DebugObject = require(basePath + '/libs/debug/debugobject.js');
var debugObject = new DebugObject({label:'routeDomainErrors'});

var fs = require('fs');

var Router = function(inDetails){
	var _this = this;

	var routersHash = {};
	//var routesHash = {};
	var routesHashArray = new HashArrayObject();
	var onConnectArray = [];
	var onDisconnectArray = [];
	var onSuccessfulLoginArray = [];



	//> -- CIP CLIENT ---------------------------
	var cipClient;
	this.setCipClient = function(inCipClient){
		cipClient = inCipClient;
	}
	this.getCipClient = function(){
		return cipClient;
	}
	//--------------------------------------------



	this.addControllerByPath =function(inPath){
		var TmpController = require(inPath);
		var tmpController = new TmpController(this);
		routersHash[inPath] = tmpController;
	}

	this.type = function(inFieldValue, inPostFunction){
		routesHashArray.add(inFieldValue, 
			{
				fieldValue:inFieldValue,
				postFunction:inPostFunction
			}
		);

		console.log('routesHashArray dump:');
		routesHashArray.dump();
	}

	this.reportOnRoute = function(inWss, inWs, inTransportLayer){
		var routingLayer_json = inTransportLayer.toJson().routingLayer;
		var arrayOfMatch = routesHashArray.getArrayFromHash(routingLayer_json.type);
		if(global.DEBUG_MODE && inWs.clientDomain){

			if(global.pause){return;}

			inWs.clientDomain.on('error', function(er){
				console.log('ERROR ON ROUTE:' + routingLayer_json.type);
				debugObject.reportError('routeError', 
					{
						route:routingLayer_json.type,
						transportLayer:inTransportLayer.toJson(),
						userId:inWs.userId,
						deviceTokenId:inWs.deviceTokenId,
						error:er
					}
				);
				debugObject.clearLog();
			})
			inWs.clientDomain.run(function(){
				for(index in arrayOfMatch){
					arrayOfMatch[index].postFunction(inWss, inWs, inTransportLayer);
				}
			});
		}else{
			for(index in arrayOfMatch){
				arrayOfMatch[index].postFunction(inWss, inWs, inTransportLayer);
			}
		}
	}



	this.onConnect = function(inPostFunction){
		onConnectArray.push(inPostFunction);
	}

	this.reportOnConnect = function(inWss, inWs){
		console.log('------reportOnConnect-------');

		for(index in onConnectArray){
			onConnectArray[index](inWss, inWs);
		}
	}




	this.onDisconnect = function(inPostFunction){
		onDisconnectArray.push(inPostFunction);
	}

	this.reportOnDisconnect = function(inWss, inWs){
		console.log('------reportOnDisconnect-------');

		for(index in onDisconnectArray){
			onDisconnectArray[index](inWss, inWs);
		}
	}



	this.onSuccessfulLogin = function(inPostFunction){
		onSuccessfulLoginArray.push(inPostFunction);
	}

	this.reportOnSuccessfulLogin = function(inWss, inWs, someData){
		for(index in onSuccessfulLoginArray){
			onSuccessfulLoginArray[index](inWss, inWs, someData);
		}
	}







	this.loadAllFilesInFolderAsControllers = function(inFolderPath){
		//----------dynamically include routes (Controller)
		fs.readdirSync(inFolderPath).forEach(function (file){
			if(file.substr(-3) == '.js'){
				console.log('------------------------------<--  A D D    R O U T I N G  -->------------------------------------------------------------------');
				console.log("loading as controller for routing >:" + file);
				_this.addControllerByPath(inFolderPath + '/' +file);
			}
		});
	}



}

module.exports = Router;




