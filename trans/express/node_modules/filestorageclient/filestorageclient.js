
console.log('==================================================================');
console.log('--  FILE STORAGE CLIENT  -----------------------------------------');
console.log('==================================================================');
var path = require('path');
var basePath = path.dirname(require.main.filename);
var fs = require('fs');
var extend = require(basePath + '/node_modules/node.extend');
var finish = require(basePath + '/node_modules/finish');
var util = require('util');
var uuid = require(basePath + '/node_modules/node-uuid');
var JsonFile = require(basePath + '/node_modules/jsonfile');



var FILE_STORAGE_DAT = basePath + '/filestoragedat.json';
//========================================================
//----  MyObject  ----------------------------------------
//========================================================
var FileStorageClient = function(inOptions){
	var _this = this;
	var options = 
		{
			datFilePath:false,
			onSave:false,
		}
	options = extend(true, options, inOptions);

	var fileStoragehash = {};


	//@@@@@@@@ READ DAT AS INPUT @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	this.readInDatFile = function(){
		fileStoragehash = JsonFile.readFileSync(options.datFilePath);
	}

	//@@@@@@@@ GET WORKING FOLDER JSTRUCT @@@@@@@@@@@@@@@@@@@@@@@@
	this.getWorkingFolderJstruct = function(inStorageKey, inName){
		var theData = fileStoragehash[inStorageKey].folders;
		for(var theIndex in theData){
			if(theData[theIndex].name == inName){
				return theData[theIndex];
			}
		}
		return false;
	}

	//@@@@@@@@ STORE FILE ARRAY @@@@@@@@@@@@@@@@@@@@@@@@@@
	this.storeFileHandleArrayInput = function(inStorageKey, inArray, inPostFunction){
		var fileJstructHash = {};
		finish.map(inArray, function(theItem, done){
			_this.storeFile(inStorageKey, theItem, function(inFileJstruct){
				fileJstructHash[inFileJstruct.fileNameNoExt] = inFileJstruct;
				done();
			});
		},
		//completed Function--------------------------------
		function(err, results){
			if(inPostFunction){
				inPostFunction(fileJstructHash);
			}
		});
	}

	//@@@@@@@@ STORE FILE @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	this.storeFile = function(inStorageKey, inSourceFilePath, inPostFunction){
		_this.readInDatFile();
		/*var workingFolderJstruct = _this.getWorkingFolderJstruct(inStorageKey, fileStoragehash[inStorageKey].useFolderPath);

		if(!(workingFolderJstruct)){
			console.log('ERROR NO workingFolderJstruct, problem');
		}*/
		//make sure not full

		if(Array.isArray(inSourceFilePath)){
			_this.storeFileHandleArrayInput(inStorageKey, inSourceFilePath, inPostFunction);
			return;
		}
		var sourceFileExtension = path.extname(inSourceFilePath).replace('.','');
		var sourceFileStream = fs.createReadStream(inSourceFilePath);
		var newTargetFileName = uuid.v1(); // + '.' + sourceFileExtension;
		var newTargetFileNameAndEx = newTargetFileName + '.' + sourceFileExtension;

		var newTargetFolder = fileStoragehash[inStorageKey].folderBasePath + fileStoragehash[inStorageKey].useFolderPath;
		var saveToFullPath = path.join(newTargetFolder, newTargetFileNameAndEx);

		var newFileJstruct = 
			{
				fileName:newTargetFileNameAndEx,
				domainFilePath:fileStoragehash[inStorageKey].folderDomainPath + fileStoragehash[inStorageKey].useFolderPath + '/' + newTargetFileNameAndEx,
				fileNameNoExt:newTargetFileName,
				fileExt:sourceFileExtension,
				localFullPath:saveToFullPath,
			}
		if(options.onSave){
			var targetFileData = 
					{
						name:newFileJstruct.fileNameNoExt,
						ext:newFileJstruct.fileExt,
						path:newTargetFolder,
						storageKey:inStorageKey,
					}
			var writeStream = function(inStream, inTargetFileInfo){
				if(inTargetFileInfo){
					targetFileData = extend(targetFileData, inTargetFileInfo);
					saveToFullPath = path.join(targetFileData.path, targetFileData.name + '.' +  targetFileData.ext);
				}
				inStream.pipe(fs.createWriteStream(saveToFullPath));
				inStream.on('close', function(){
					fileStoragehash[inStorageKey].currentTotalFolderCount++;
					if(inPostFunction){inPostFunction(newFileJstruct);}
				});
			}
			options.onSave(sourceFileStream, sourceFileExtension, newFileJstruct, writeStream, targetFileData);
		
		}else{

			sourceFileStream.pipe(fs.createWriteStream(saveToFullPath));
			sourceFileStream.on('close', function(){
				fileStoragehash[inStorageKey].currentTotalFolderCount++;
				if(inPostFunction){inPostFunction(newFileJstruct);}
			});

		}

	}

	_this.readInDatFile();
}

module.exports = FileStorageClient;


//var gm = require(basePath + '/node_modules/gm');

//--------testing area --------
/*var fileStorageClient = new FileStorageClient(
	{
		datFilePath:FILE_STORAGE_DAT,
		onSave:function(inStream, inType, inFileStruct, inWriteStream, inTargetFileInfo){
			console.log('onSave:' + inType);

			if(inType == 'png'){
				gm(inStream, inFileStruct.fileName)
					.resize('150^', '100^')
					.gravity('Center')
					.quality(100)
					.stroke('#ffffff')
					.font('Helvetica.ttf')
					.drawText(5, 20, 'HOPPE222R')
					.crop(300, 200)

					.stream(function (err, stdout, stderr) {
						inWriteStream(stdout);
					});
				;
			}else{
				inWriteStream(inStream);
			}

		},
	}
);*/
