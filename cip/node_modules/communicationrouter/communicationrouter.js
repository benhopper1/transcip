var path = require('path');
var basePath = path.dirname(require.main.filename);
var HashArrayObject = require(basePath + '/libs/hashofarrayobject.js');

var fs = require('fs');

var Router = function(inDetails){
	var _this = this;

	var routersHash = {};

	var routesHashArray = new HashArrayObject();
	var onConnectArray = [];
	var onDisconnectArray = [];
	var onSuccessfulLoginArray = [];

	this.addControllerByPath =function(inPath){
		console.log('path:' + inPath);
		var TmpController = require(inPath);
		var tmpController = new TmpController(this);
		routersHash[inPath] = tmpController;
	}

	this.type = function(inFieldValue, inPostFunction){
		routesHashArray.add(inFieldValue, 
			{
				fieldValue:inFieldValue,
				postFunction:inPostFunction
			}
		);

		console.log('routesHashArray dump:');
		routesHashArray.dump();
	}

	this.reportOnRoute = function(inConnection, transportLayer_json){
		//var transportLayer_json = inTransportLayer.toJson();
		if(transportLayer_json.cipLayer){
			var arrayOfMatch = routesHashArray.getArrayFromHash(transportLayer_json.cipLayer.type);
			for(index in arrayOfMatch){
				arrayOfMatch[index].postFunction(inConnection, transportLayer_json);
			}
		}
	}



	this.onConnect = function(inPostFunction){
		onConnectArray.push(inPostFunction);
	}

	this.reportOnConnect = function(inConnection){
		console.log('------reportOnConnect-------');

		for(index in onConnectArray){
			onConnectArray[index](inConnection);
		}
	}




	this.onDisconnect = function(inPostFunction){
		onDisconnectArray.push(inPostFunction);
	}

	this.reportOnDisconnect = function(inConnection){
		console.log('------reportOnDisconnect-------');

		for(index in onDisconnectArray){
			onDisconnectArray[index](inConnection);
		}
	}



	this.onSuccessfulLogin = function(inPostFunction){
		onSuccessfulLoginArray.push(inPostFunction);
	}

	this.reportOnSuccessfulLogin = function(inConnection, someData){
		for(index in onSuccessfulLoginArray){
			onSuccessfulLoginArray[index](inConnection, someData);
		}
	}







	this.loadAllFilesInFolderAsControllers = function(inFolderPath){
		//----------dynamically include routes (Controller)
		fs.readdirSync(inFolderPath).forEach(function (file){
			if(file.substr(-3) == '.js'){
				console.log('------------------------------<--  A D D    R O U T I N G  -->------------------------------------------------------------------');
				console.log("loading as controller for routing >:" + file);
				_this.addControllerByPath(inFolderPath + '/' +file);
			}
		});
	}



}

module.exports = Router;




